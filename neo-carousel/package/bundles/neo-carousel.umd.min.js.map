{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://neo-carousel/lib/ngx-gallery-action.component.ts","ng://neo-carousel/lib/ngx-gallery-arrows.component.ts","ng://neo-carousel/lib/ngx-gallery-bullets.component.ts","ng://neo-carousel/lib/ngx-gallery-helper.service.ts","ng://neo-carousel/lib/ngx-gallery-animation.model.ts","ng://neo-carousel/lib/ngx-gallery-image.component.ts","ng://neo-carousel/lib/ngx-gallery-order.model.ts","ng://neo-carousel/lib/ngx-gallery-thumbnails.component.ts","ng://neo-carousel/lib/ngx-gallery-preview.component.ts","ng://neo-carousel/lib/ngx-gallery-image-size.model.ts","ng://neo-carousel/lib/ngx-gallery-layout.model.ts","ng://neo-carousel/lib/ngx-gallery-action.model.ts","ng://neo-carousel/lib/ngx-gallery-options.model.ts","ng://neo-carousel/lib/ngx-gallery-ordered-image.model.ts","ng://neo-carousel/lib/ngx-gallery.component.ts","ng://neo-carousel/lib/ngx-gallery-image.model.ts","ng://neo-carousel/index.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","NgxGalleryActionComponent","this","disabled","titleText","onClick","EventEmitter","prototype","handleClick","event","emit","stopPropagation","preventDefault","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","NgxGalleryArrowsComponent","onPrevClick","onNextClick","handlePrevClick","handleNextClick","NgxGalleryBulletsComponent","active","onChange","getBullets","count","handleChange","index","NgxGalleryHelperService","renderer","swipeHandlers","Map","manageSwipe","status","element","id","nextHandler","prevHandler","handlers","getSwipeHandlers","set","listen","nativeElement","map","handler","removeSwipeHandlers","validateUrl","url","replace","RegExp","getBackgroundUrl","image","get","delete","Injectable","providedIn","Renderer2","NgxGalleryAnimation","Fade","Slide","Rotate","Zoom","NgxGalleryImageComponent","sanitization","elementRef","helperService","onActiveChange","canChangeImage","ngOnInit","arrows","arrowsAutoHide","autoPlay","startAutoPlay","ngOnChanges","changes","_this","swipe","showNext","showPrev","onMouseEnter","autoPlayPauseOnHover","stopAutoPlay","onMouseLeave","reset","selectedIndex","getImages","images","lazyLoading","indexes_1","prevIndex","infinityMove","length","nextIndex","filter","img","indexOf","timer","setInterval","autoPlayInterval","clearInterval","clickable","show","setChangeTimeout","canShowNext","canShowPrev","timeout","animation","setTimeout","getSafeUrl","bypassSecurityTrustStyle","DomSanitizer","ElementRef","HostListener","NgxGalleryOrder","Column","Row","Page","NgxGalleryThumbnailsComponent","minStopIndex","validateIndex","moveRight","moveLeft","remainingCountValue","rows","columns","mouseenter","setDefaultPosition","remainingCount","slice","order","stopIndex","moveSize","hasLink","links","canMoveRight","maxIndex","getMaxIndex","setThumbnailsPosition","canMoveLeft","getThumbnailLeft","calculatedIndex","Math","floor","ceil","getThumbnailPosition","getThumbnailTop","getThumbnailWidth","getThumbnailDimension","getThumbnailHeight","thumbnailsLeft","thumbnailsMarginLeft","margin","canShowArrows","getVisibleCount","newIndex","getSafeStyle","NgxGalleryPreviewComponent","changeDetectorRef","showSpinner","positionLeft","positionTop","zoomValue","loading","rotateValue","onOpen","onClose","isOpen","initialX","initialY","initialLeft","initialTop","isMove","ngOnDestroy","keyDownListener","onKeyDown","keyboardNavigation","isKeyboardPrev","isKeyboardNext","closeOnEsc","isKeyboardEsc","close","open","forceFullscreen","manageFullscreen","closeFullscreen","imageMouseEnter","imageMouseLeave","clearTimeout","showAtIndex","fullscreen","doc","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","openFullscreen","substr","bypassSecurityTrustUrl","zoomIn","canZoomIn","zoomStep","zoomMax","zoomOut","canZoomOut","zoomMin","resetPosition","rotateLeft","rotateRight","getTransform","canDragOnZoom","zoom","mouseDownHandler","getClientX","getClientY","mouseUpHandler","mouseMoveHandler","touches","clientX","clientY","keyCode","document","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","isFullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","first","_show","src","srcIndex","description","descriptions","markForCheck","isLoaded","previewImage","onload","complete","naturalWidth","ChangeDetectorRef","ViewChild","NgxGalleryImageSize","Cover","Contain","NgxGalleryLayout","ThumbnailsTop","ThumbnailsBottom","NgxGalleryAction","action","icon","NgxGalleryOptions","obj","preventDefaults","undefined","breakpoint","use","source","defaultValue","width","height","fullWidth","layout","startIndex","linkTarget","imagePercent","imageArrows","imageArrowsAutoHide","imageSwipe","imageAnimation","imageSize","imageAutoPlay","imageAutoPlayInterval","imageAutoPlayPauseOnHover","imageInfinityMove","imageActions","imageDescription","imageBullets","thumbnails","thumbnailsColumns","thumbnailsRows","thumbnailsPercent","thumbnailsMargin","thumbnailsArrows","thumbnailsArrowsAutoHide","thumbnailsSwipe","thumbnailsMoveSize","thumbnailsOrder","thumbnailsRemainingCount","thumbnailsAsLinks","thumbnailsAutoHide","thumbnailMargin","thumbnailSize","thumbnailActions","preview","previewDescription","previewArrows","previewArrowsAutoHide","previewSwipe","previewFullscreen","previewForceFullscreen","previewCloseOnClick","previewCloseOnEsc","previewKeyboardNavigation","previewAnimation","previewAutoPlay","previewAutoPlayInterval","previewAutoPlayPauseOnHover","previewInfinityMove","previewZoom","previewZoomStep","previewZoomMax","previewZoomMin","previewRotate","previewDownload","previewCustom","previewBullets","arrowPrevIcon","arrowNextIcon","closeIcon","fullscreenIcon","spinnerIcon","zoomInIcon","zoomOutIcon","rotateLeftIcon","rotateRightIcon","downloadIcon","previewPrevIconOption","previewNextIconOption","actions","NgxGalleryOrderedImage","NgxGalleryComponent","myElement","imagesReady","change","previewOpen","previewClose","previewChange","oldImagesLength","prevBreakpoint","tempOptions","widthOption","heightOption","thumbnailsOption","thumbnailsColumnsOption","startIndexOption","imageDescriptionOption","imageArrowsOption","thumbnailsArrowsOption","previewArrowsOption","imageSwipeOption","thumbnailsSwipeOption","previewSwipeOption","imageAutoPlayOption","imageAutoPlayIntervalOption","imageAutoPlayPauseOnHoverOption","imageInfinityMoveOption","previewOption","arrowPrevIconOption","arrowNextIconOption","options","opt","sortOptions","setBreakpoint","setOptions","checkFullWidth","currentOptions","ngDoCheck","oldImages","setImages","resetThumbnails","ngAfterViewInit","onResize","fullWidthTimeout","getImageHeight","getThumbnailsHeight","getThumbnailsMarginTop","getThumbnailsMarginBottom","openPreview","previewEnabled","onPreviewOpen","onPreviewClose","selectFromImage","select","selectFromThumbnails","previewSelect","moveThumbnailsRight","thubmnails","moveThumbnailsLeft","canMoveThumbnailsRight","canMoveThumbnailsLeft","body","clientWidth","left","parentNode","innerWidth","smallImages","mediumImages","medium","bigImages","labels","breakpoints","window","pop","arguments","concat","__spread","a","sort","combineOptions","second","keys","val","providers","HostBinding","NgxGalleryImage","small","big","label","CustomHammerConfig","_super","apply","overrides","pinch","enable","rotate","__","constructor","create","tslib_1.__extends","HammerGestureConfig","NgxGalleryModule","NgModule","imports","CommonModule","OverlayModule","MatIconModule","declarations","exports","provide","HAMMER_GESTURE_CONFIG","useClass"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ngx-gallery-action',\n    template: `\n        <div class=\"ngx-gallery-icon\" [class.ngx-gallery-icon-disabled]=\"disabled\"\n            aria-hidden=\"true\"\n            title=\"{{ titleText }}\"\n            (click)=\"handleClick($event)\">\n                <!--<i class=\"ngx-gallery-icon-content {{ icon }}\"></i>-->\n          <mat-icon class=\"ngx-gallery-icon-content\">{{ icon }}</mat-icon>\n        </div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxGalleryActionComponent {\n    @Input() icon: string;\n    @Input() disabled = false;\n    @Input() titleText = '';\n\n    @Output() onClick: EventEmitter<Event> = new EventEmitter();\n\n    handleClick(event: Event) {\n        if (!this.disabled) {\n            this.onClick.emit(event);\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n","import { Component, Input, Output, EventEmitter, } from '@angular/core';\n\n@Component({\n    selector: 'ngx-gallery-arrows',\n    template: `\n        <div class=\"ngx-gallery-arrow-wrapper ngx-gallery-arrow-left\">\n            <div class=\"ngx-gallery-icon ngx-gallery-arrow\" aria-hidden=\"true\" (click)=\"handlePrevClick()\" [class.ngx-gallery-disabled]=\"prevDisabled\">\n                <!--<i class=\"ngx-gallery-icon-content {{arrowPrevIcon}}\"></i>-->\n              <mat-icon class=\"ngx-gallery-icon-content\">{{ arrowPrevIcon }}</mat-icon>\n            </div>\n        </div>\n        <div class=\"ngx-gallery-arrow-wrapper ngx-gallery-arrow-right\">\n            <div class=\"ngx-gallery-icon ngx-gallery-arrow\" aria-hidden=\"true\" (click)=\"handleNextClick()\" [class.ngx-gallery-disabled]=\"nextDisabled\">\n                <!--<i class=\"ngx-gallery-icon-content {{arrowNextIcon}}\"></i>-->\n              <mat-icon class=\"ngx-gallery-icon-content\">{{ arrowNextIcon }}</mat-icon>\n            </div>\n        </div>\n    `,\n    styleUrls: ['./ngx-gallery-arrows.component.scss']\n})\nexport class NgxGalleryArrowsComponent {\n    @Input() prevDisabled: boolean;\n    @Input() nextDisabled: boolean;\n    @Input() arrowPrevIcon: string;\n    @Input() arrowNextIcon: string;\n\n    @Output() onPrevClick = new EventEmitter();\n    @Output() onNextClick = new EventEmitter();\n\n    handlePrevClick(): void {\n        this.onPrevClick.emit();\n    }\n\n    handleNextClick(): void {\n        this.onNextClick.emit();\n    }\n}\n","import { Component, Input, Output, EventEmitter, } from '@angular/core';\n\n@Component({\n    selector: 'ngx-gallery-bullets',\n    template: `\n        <div class=\"ngx-gallery-bullet\" *ngFor=\"let bullet of getBullets(); let i = index;\" (click)=\"handleChange($event, i)\" [ngClass]=\"{ 'ngx-gallery-active': i == active }\"></div>\n    `,\n    styleUrls: ['./ngx-gallery-bullets.component.scss']\n})\nexport class NgxGalleryBulletsComponent {\n    @Input() count: number;\n    @Input() active: number = 0;\n\n    @Output() onChange = new EventEmitter();\n\n    getBullets(): number[] {\n        return Array(this.count);\n    }\n\n    handleChange(event: Event, index: number): void {\n        this.onChange.emit(index);\n    }\n}\n","import { Injectable, ElementRef, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxGalleryHelperService {\n\n    private swipeHandlers: Map<string, Function[]> = new Map<string, Function[]>();\n\n    constructor(private renderer: Renderer2) {}\n\n    manageSwipe(status: boolean, element: ElementRef, id: string, nextHandler: Function, prevHandler: Function): void {\n\n        const handlers = this.getSwipeHandlers(id);\n\n        // swipeleft and swiperight are available only if hammerjs is included\n        try {\n            if (status && !handlers) {\n                this.swipeHandlers.set(id, [\n                    this.renderer.listen(element.nativeElement, 'swipeleft', () => nextHandler()),\n                    this.renderer.listen(element.nativeElement, 'swiperight', () => prevHandler())\n                ]);\n            } else if (!status && handlers) {\n                handlers.map((handler) => handler());\n                this.removeSwipeHandlers(id);\n            }\n        } catch (e) {}\n    }\n\n    validateUrl(url: string): string {\n        if (url.replace) {\n            return url.replace(new RegExp(' ', 'g'), '%20')\n                .replace(new RegExp('\\'', 'g'), '%27');\n        } else {\n            return url;\n        }\n    }\n\n    getBackgroundUrl(image: string) {\n        return 'url(\\'' + this.validateUrl(image) + '\\')';\n    }\n\n    private getSwipeHandlers(id: string): Function[] | undefined {\n        return this.swipeHandlers.get(id);\n    }\n\n    private removeSwipeHandlers(id: string): void {\n        this.swipeHandlers.delete(id);\n    }\n}\n","export class NgxGalleryAnimation {\n    static Fade = 'fade';\n    static Slide = 'slide';\n    static Rotate = 'rotate';\n    static Zoom = 'zoom';\n}\n","import { Component, Input, Output, EventEmitter, HostListener,  ElementRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\n\nimport { NgxGalleryHelperService } from './ngx-gallery-helper.service';\nimport { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image.model';\nimport { NgxGalleryAnimation } from './ngx-gallery-animation.model';\nimport { NgxGalleryAction } from './ngx-gallery-action.model';\n\n@Component({\n    selector: 'ngx-gallery-image',\n    template: `\n        <div class=\"ngx-gallery-image-wrapper ngx-gallery-animation-{{animation}} ngx-gallery-image-size-{{size}}\">\n            <div class=\"ngx-gallery-image\" *ngFor=\"let image of getImages(); let i = index;\" [ngClass]=\"{ 'ngx-gallery-active': selectedIndex == image.index, 'ngx-gallery-inactive-left': selectedIndex > image.index, 'ngx-gallery-inactive-right': selectedIndex < image.index, 'ngx-gallery-clickable': clickable }\" [style.background-image]=\"getSafeUrl(image.src)\" (click)=\"handleClick($event, image.index)\">\n                <div class=\"ngx-gallery-icons-wrapper\">\n                    <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\" [titleText]=\"action.titleText\" (onClick)=\"action.onClick($event, image.index)\"></ngx-gallery-action>\n                </div>\n                <div class=\"ngx-gallery-image-text\" *ngIf=\"showDescription && descriptions[image.index]\" [innerHTML]=\"descriptions[image.index]\" (click)=\"$event.stopPropagation()\"></div>\n            </div>\n        </div>\n        <ngx-gallery-bullets *ngIf=\"bullets\" [count]=\"images.length\" [active]=\"selectedIndex\" (onChange)=\"show($event)\"></ngx-gallery-bullets>\n        <ngx-gallery-arrows class=\"ngx-gallery-image-size-{{size}}\" *ngIf=\"arrows\" (onPrevClick)=\"showPrev()\" (onNextClick)=\"showNext()\" [prevDisabled]=\"!canShowPrev()\" [nextDisabled]=\"!canShowNext()\" [arrowPrevIcon]=\"arrowPrevIcon\" [arrowNextIcon]=\"arrowNextIcon\"></ngx-gallery-arrows>\n    `,\n    styleUrls: ['./ngx-gallery-image.component.scss']\n})\nexport class NgxGalleryImageComponent implements OnInit, OnChanges {\n    @Input() images: NgxGalleryOrderedImage[];\n    @Input() clickable: boolean;\n    @Input() selectedIndex: number;\n    @Input() arrows: boolean;\n    @Input() arrowsAutoHide: boolean;\n    @Input() swipe: boolean;\n    @Input() animation: string;\n    @Input() size: string;\n    @Input() arrowPrevIcon: string;\n    @Input() arrowNextIcon: string;\n    @Input() autoPlay: boolean;\n    @Input() autoPlayInterval: number;\n    @Input() autoPlayPauseOnHover: boolean;\n    @Input() infinityMove: boolean;\n    @Input() lazyLoading: boolean;\n    @Input() actions: NgxGalleryAction[];\n    @Input() descriptions: string[];\n    @Input() showDescription: boolean;\n    @Input() bullets: boolean;\n\n    @Output() onClick = new EventEmitter();\n    @Output() onActiveChange = new EventEmitter();\n\n    canChangeImage = true;\n\n    private timer;\n\n    constructor(private sanitization: DomSanitizer,\n        private elementRef: ElementRef, private helperService: NgxGalleryHelperService) {}\n\n    ngOnInit(): void {\n        if (this.arrows && this.arrowsAutoHide) {\n            this.arrows = false;\n        }\n\n        if (this.autoPlay) {\n            this.startAutoPlay();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['swipe']) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef, 'image', () => this.showNext(), () => this.showPrev());\n        }\n    }\n\n    @HostListener('mouseenter') onMouseEnter() {\n        if (this.arrowsAutoHide && !this.arrows) {\n            this.arrows = true;\n        }\n\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.stopAutoPlay();\n        }\n    }\n\n    @HostListener('mouseleave') onMouseLeave() {\n        if (this.arrowsAutoHide && this.arrows) {\n            this.arrows = false;\n        }\n\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.startAutoPlay();\n        }\n    }\n\n    reset(index: number): void {\n        this.selectedIndex = index;\n    }\n\n    getImages(): NgxGalleryOrderedImage[] {\n        if (!this.images) {\n            return [];\n        }\n\n        if (this.lazyLoading) {\n            let indexes = [this.selectedIndex];\n            let prevIndex = this.selectedIndex - 1;\n\n            if (prevIndex === -1 && this.infinityMove) {\n                indexes.push(this.images.length - 1)\n            } else if (prevIndex >= 0) {\n                indexes.push(prevIndex);\n            }\n\n            let nextIndex = this.selectedIndex + 1;\n\n            if (nextIndex == this.images.length && this.infinityMove) {\n                indexes.push(0);\n            } else if (nextIndex < this.images.length) {\n                indexes.push(nextIndex);\n            }\n\n            return this.images.filter((img, i) => indexes.indexOf(i) != -1);\n        } else {\n            return this.images;\n        }\n    }\n\n    startAutoPlay(): void {\n        this.stopAutoPlay();\n\n        this.timer = setInterval(() => {\n            if (!this.showNext()) {\n                this.selectedIndex = -1;\n                this.showNext();\n            }\n        }, this.autoPlayInterval);\n    }\n\n    stopAutoPlay() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n\n    handleClick(event: Event, index: number): void {\n        if (this.clickable) {\n            this.onClick.emit(index);\n\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n\n    show(index: number) {\n        this.selectedIndex = index;\n        this.onActiveChange.emit(this.selectedIndex);\n        this.setChangeTimeout();\n    }\n\n    showNext(): boolean {\n        if (this.canShowNext() && this.canChangeImage) {\n            this.selectedIndex++;\n\n            if (this.selectedIndex === this.images.length) {\n                this.selectedIndex = 0;\n            }\n\n            this.onActiveChange.emit(this.selectedIndex);\n            this.setChangeTimeout();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    showPrev(): void {\n        if (this.canShowPrev() && this.canChangeImage) {\n            this.selectedIndex--;\n\n            if (this.selectedIndex < 0) {\n                this.selectedIndex = this.images.length - 1;\n            }\n\n            this.onActiveChange.emit(this.selectedIndex);\n            this.setChangeTimeout();\n        }\n    }\n\n    setChangeTimeout() {\n        this.canChangeImage = false;\n        let timeout = 1000;\n\n        if (this.animation === NgxGalleryAnimation.Slide\n            || this.animation === NgxGalleryAnimation.Fade) {\n                timeout = 500;\n        }\n\n        setTimeout(() => {\n            this.canChangeImage = true;\n        }, timeout);\n    }\n\n    canShowNext(): boolean {\n        if (this.images) {\n            return this.infinityMove || this.selectedIndex < this.images.length - 1\n                ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    canShowPrev(): boolean {\n        if (this.images) {\n            return this.infinityMove || this.selectedIndex > 0 ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    getSafeUrl(image: string): SafeStyle {\n        return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    }\n}\n","export class NgxGalleryOrder {\n    static Column = 1;\n    static Row = 2;\n    static Page = 3;\n}\n","import { Component, Input, Output, EventEmitter, HostListener, OnChanges, SimpleChanges, ElementRef } from '@angular/core';\nimport { DomSanitizer, SafeStyle, SafeResourceUrl } from '@angular/platform-browser';\n\nimport { NgxGalleryHelperService } from './ngx-gallery-helper.service';\nimport { NgxGalleryOrder } from './ngx-gallery-order.model';\nimport { NgxGalleryAction } from './ngx-gallery-action.model';\n\n@Component({\n    selector: 'ngx-gallery-thumbnails',\n    template: `\n    <div class=\"ngx-gallery-thumbnails-wrapper ngx-gallery-thumbnail-size-{{size}}\">\n        <div class=\"ngx-gallery-thumbnails\" [style.transform]=\"'translateX(' + thumbnailsLeft + ')'\" [style.marginLeft]=\"thumbnailsMarginLeft\">\n            <a [href]=\"hasLink(i) ? links[i] : '#'\" [target]=\"linkTarget\" class=\"ngx-gallery-thumbnail\" *ngFor=\"let image of getImages(); let i = index;\" [style.background-image]=\"getSafeUrl(image)\" (click)=\"handleClick($event, i)\" [style.width]=\"getThumbnailWidth()\" [style.height]=\"getThumbnailHeight()\" [style.left]=\"getThumbnailLeft(i)\" [style.top]=\"getThumbnailTop(i)\" [ngClass]=\"{ 'ngx-gallery-active': i == selectedIndex, 'ngx-gallery-clickable': clickable }\" [attr.aria-label]=\"labels[i]\">\n                <div class=\"ngx-gallery-icons-wrapper\">\n                    <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\" [titleText]=\"action.titleText\" (onClick)=\"action.onClick($event, i)\"></ngx-gallery-action>\n                </div>\n                <div class=\"ngx-gallery-remaining-count-overlay\" *ngIf=\"remainingCount && remainingCountValue && (i == (rows * columns) - 1)\">\n                    <span class=\"ngx-gallery-remaining-count\">+{{remainingCountValue}}</span>\n                </div>\n            </a>\n        </div>\n    </div>\n    <ngx-gallery-arrows *ngIf=\"canShowArrows()\" (onPrevClick)=\"moveLeft()\" (onNextClick)=\"moveRight()\" [prevDisabled]=\"!canMoveLeft()\" [nextDisabled]=\"!canMoveRight()\" [arrowPrevIcon]=\"arrowPrevIcon\" [arrowNextIcon]=\"arrowNextIcon\"></ngx-gallery-arrows>\n    `,\n    styleUrls: ['./ngx-gallery-thumbnails.component.scss']\n})\nexport class NgxGalleryThumbnailsComponent implements OnChanges {\n\n    thumbnailsLeft: string;\n    thumbnailsMarginLeft: string;\n    mouseenter: boolean;\n    remainingCountValue: number;\n\n    minStopIndex = 0;\n\n    @Input() images: string[] | SafeResourceUrl[];\n    @Input() links: string[];\n    @Input() labels: string[];\n    @Input() linkTarget: string;\n    @Input() columns: number;\n    @Input() rows: number;\n    @Input() arrows: boolean;\n    @Input() arrowsAutoHide: boolean;\n    @Input() margin: number;\n    @Input() selectedIndex: number;\n    @Input() clickable: boolean;\n    @Input() swipe: boolean;\n    @Input() size: string;\n    @Input() arrowPrevIcon: string;\n    @Input() arrowNextIcon: string;\n    @Input() moveSize: number;\n    @Input() order: number;\n    @Input() remainingCount: boolean;\n    @Input() lazyLoading: boolean;\n    @Input() actions: NgxGalleryAction[];\n\n    @Output() onActiveChange = new EventEmitter();\n\n    private index = 0;\n\n    constructor(private sanitization: DomSanitizer, private elementRef: ElementRef,\n        private helperService: NgxGalleryHelperService) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['selectedIndex']) {\n            this.validateIndex();\n        }\n\n        if (changes['swipe']) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef,\n            'thumbnails', () => this.moveRight(), () => this.moveLeft());\n        }\n\n        if (this.images) {\n            this.remainingCountValue = this.images.length - (this.rows * this.columns);\n        }\n    }\n\n    @HostListener('mouseenter') onMouseEnter() {\n        this.mouseenter = true;\n    }\n\n    @HostListener('mouseleave') onMouseLeave() {\n        this.mouseenter = false;\n    }\n\n    reset(index: number): void {\n        this.selectedIndex = index;\n        this.setDefaultPosition();\n\n        this.index = 0;\n        this.validateIndex();\n    }\n\n    getImages(): string[] | SafeResourceUrl[] {\n        if (!this.images) {\n            return [];\n        }\n\n        if (this.remainingCount) {\n            return this.images.slice(0, this.rows * this.columns);\n        } \n        else if (this.lazyLoading && this.order != NgxGalleryOrder.Row) {\n            let stopIndex = 0;\n\n            if (this.order === NgxGalleryOrder.Column) {\n                stopIndex = (this.index + this.columns + this.moveSize) * this.rows;\n            }\n            else if (this.order === NgxGalleryOrder.Page) {\n                stopIndex = this.index + ((this.columns * this.rows) * 2);\n            }\n\n            if (stopIndex <= this.minStopIndex) {\n                stopIndex = this.minStopIndex;\n            } else {\n                this.minStopIndex = stopIndex;\n            }\n\n            return this.images.slice(0, stopIndex);\n        } \n        else {\n            return this.images;\n        }\n    }\n\n    handleClick(event: Event, index: number): void {\n        if (!this.hasLink(index)) {\n            this.selectedIndex = index;\n            this.onActiveChange.emit(index);\n\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n\n    hasLink(index: number): boolean {\n        if (this.links && this.links.length && this.links[index]) return true;\n    }\n\n    moveRight(): void {\n        if (this.canMoveRight()) {\n            this.index += this.moveSize;\n            let maxIndex = this.getMaxIndex() - this.columns;\n\n            if (this.index > maxIndex) {\n                this.index = maxIndex;\n            }\n\n            this.setThumbnailsPosition();\n        }\n    }\n\n    moveLeft(): void {\n        if (this.canMoveLeft()) {\n            this.index -= this.moveSize;\n\n            if (this.index < 0) {\n                this.index = 0;\n            }\n\n            this.setThumbnailsPosition();\n        }\n    }\n\n    canMoveRight(): boolean {\n        return this.index + this.columns < this.getMaxIndex() ? true : false;\n    }\n\n    canMoveLeft(): boolean {\n        return this.index !== 0 ? true : false;\n    }\n\n    getThumbnailLeft(index: number): SafeStyle {\n        let calculatedIndex;\n\n        if (this.order === NgxGalleryOrder.Column) {\n            calculatedIndex = Math.floor(index / this.rows);\n        }\n        else if (this.order === NgxGalleryOrder.Page) {\n            calculatedIndex = (index % this.columns) + (Math.floor(index / (this.rows * this.columns)) * this.columns);\n        }\n        else if (this.order == NgxGalleryOrder.Row && this.remainingCount) {\n            calculatedIndex = index % this.columns;\n        }\n        else {\n            calculatedIndex = index % Math.ceil(this.images.length / this.rows);\n        }\n\n        return this.getThumbnailPosition(calculatedIndex, this.columns);\n    }\n\n    getThumbnailTop(index: number): SafeStyle {\n        let calculatedIndex;\n\n        if (this.order === NgxGalleryOrder.Column) {\n            calculatedIndex = index % this.rows;\n        }\n        else if (this.order === NgxGalleryOrder.Page) {\n            calculatedIndex = Math.floor(index / this.columns) - (Math.floor(index / (this.rows * this.columns)) * this.rows);\n        }\n        else if (this.order == NgxGalleryOrder.Row && this.remainingCount) {\n            calculatedIndex = Math.floor(index / this.columns);\n        }\n        else {\n            calculatedIndex = Math.floor(index / Math.ceil(this.images.length / this.rows));\n        }\n\n        return this.getThumbnailPosition(calculatedIndex, this.rows);\n    }\n\n    getThumbnailWidth(): SafeStyle {\n        return this.getThumbnailDimension(this.columns);\n    }\n\n    getThumbnailHeight(): SafeStyle {\n        return this.getThumbnailDimension(this.rows);\n    }\n\n    setThumbnailsPosition(): void {\n        this.thumbnailsLeft = - ((100 / this.columns) * this.index) + '%'\n\n        this.thumbnailsMarginLeft = - ((this.margin - (((this.columns - 1)\n        * this.margin) / this.columns)) * this.index) + 'px';\n    }\n\n    setDefaultPosition(): void {\n        this.thumbnailsLeft = '0px';\n        this.thumbnailsMarginLeft = '0px';\n    }\n\n    canShowArrows(): boolean {\n        if (this.remainingCount) {\n            return false;\n        } else if (this.arrows && this.images && this.images.length > this.getVisibleCount()\n            && (!this.arrowsAutoHide || this.mouseenter)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    validateIndex(): void {\n        if (this.images) {\n            let newIndex;\n\n            if (this.order === NgxGalleryOrder.Column) {\n                newIndex = Math.floor(this.selectedIndex / this.rows);\n            } else {\n                newIndex = this.selectedIndex % Math.ceil(this.images.length / this.rows);\n            }\n\n            if (this.remainingCount) {\n                newIndex = 0;\n            }\n\n            if (newIndex < this.index || newIndex >= this.index + this.columns) {\n                const maxIndex = this.getMaxIndex() - this.columns;\n                this.index = newIndex > maxIndex ? maxIndex : newIndex;\n\n                this.setThumbnailsPosition();\n            }\n        }\n    }\n\n    getSafeUrl(image: string): SafeStyle {\n        return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    }\n\n    private getThumbnailPosition(index: number, count: number): SafeStyle {\n        return this.getSafeStyle('calc(' + ((100 / count) * index) + '% + '\n            + ((this.margin - (((count - 1) * this.margin) / count)) * index) + 'px)');\n    }\n\n    private getThumbnailDimension(count: number): SafeStyle {\n        if (this.margin !== 0) {\n            return this.getSafeStyle('calc(' + (100 / count) + '% - '\n                + (((count - 1) * this.margin) / count) + 'px)');\n        } else {\n            return this.getSafeStyle('calc(' + (100 / count) + '% + 1px)');\n        }\n    }\n\n    private getMaxIndex(): number {\n        if (this.order == NgxGalleryOrder.Page) {\n            let maxIndex = (Math.floor(this.images.length / this.getVisibleCount()) * this.columns);\n\n            if (this.images.length % this.getVisibleCount() > this.columns) {\n                maxIndex += this.columns;\n            }\n            else {\n                maxIndex += this.images.length % this.getVisibleCount();\n            }\n\n            return maxIndex;\n        }\n        else {\n            return Math.ceil(this.images.length / this.rows);\n        }\n    }\n\n    private getVisibleCount(): number {\n        return this.columns * this.rows;\n    }\n\n    private getSafeStyle(value: string): SafeStyle {\n        return this.sanitization.bypassSecurityTrustStyle(value);\n    }\n}\n","import { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, ElementRef, HostListener, ViewChild, Renderer2 } from '@angular/core';\nimport { SafeResourceUrl, DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';\n\nimport { NgxGalleryAction } from './ngx-gallery-action.model';\nimport { NgxGalleryHelperService } from './ngx-gallery-helper.service';\n\n@Component({\n    selector: 'ngx-gallery-preview',\n    template: `\n        <ngx-gallery-arrows *ngIf=\"arrows\" (onPrevClick)=\"showPrev()\" (onNextClick)=\"showNext()\" [prevDisabled]=\"!canShowPrev()\" [nextDisabled]=\"!canShowNext()\" [arrowPrevIcon]=\"arrowPrevIcon\" [arrowNextIcon]=\"arrowNextIcon\"></ngx-gallery-arrows>\n        <div class=\"ngx-gallery-preview-top\">\n            <div class=\"ngx-gallery-preview-icons\">\n                <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\" [titleText]=\"action.titleText\" (onClick)=\"action.onClick($event, index)\"></ngx-gallery-action>\n                <a *ngIf=\"download && src\" [href]=\"src\" class=\"ngx-gallery-icon\" aria-hidden=\"true\" download>\n\n                  <mat-icon class=\"ngx-gallery-icon-content\">{{ downloadIcon }}</mat-icon>\n                </a>\n                <ngx-gallery-action *ngIf=\"zoom\" [icon]=\"zoomOutIcon\" [disabled]=\"!canZoomOut()\" (onClick)=\"zoomOut()\"></ngx-gallery-action>\n                <ngx-gallery-action *ngIf=\"zoom\" [icon]=\"zoomInIcon\" [disabled]=\"!canZoomIn()\" (onClick)=\"zoomIn()\"></ngx-gallery-action>\n                <ngx-gallery-action *ngIf=\"rotate\" [icon]=\"rotateLeftIcon\" (onClick)=\"rotateLeft()\"></ngx-gallery-action>\n                <ngx-gallery-action *ngIf=\"rotate\" [icon]=\"rotateRightIcon\" (onClick)=\"rotateRight()\"></ngx-gallery-action>\n                <ngx-gallery-action *ngIf=\"fullscreen\" [icon]=\"fullscreenIcon\" (onClick)=\"manageFullscreen()\"></ngx-gallery-action>\n                <ngx-gallery-action [icon]=\"closeIcon\" (onClick)=\"close()\"></ngx-gallery-action>\n            </div>\n        </div>\n        <div class=\"ngx-spinner-wrapper ngx-gallery-center\" [class.ngx-gallery-active]=\"showSpinner\">\n          <mat-icon class=\"ngx-gallery-icon-content\">{{ spinnerIcon }}</mat-icon>\n        </div>\n        <div class=\"ngx-gallery-preview-wrapper\" (click)=\"closeOnClick && close()\" (mouseup)=\"mouseUpHandler($event)\" (mousemove)=\"mouseMoveHandler($event)\" (touchend)=\"mouseUpHandler($event)\" (touchmove)=\"mouseMoveHandler($event)\">\n            <div class=\"ngx-gallery-preview-img-wrapper\">\n                <img *ngIf=\"src\" #previewImage class=\"ngx-gallery-preview-img ngx-gallery-center\" [src]=\"src\" (click)=\"$event.stopPropagation()\" (mouseenter)=\"imageMouseEnter()\" (mouseleave)=\"imageMouseLeave()\" (mousedown)=\"mouseDownHandler($event)\" (touchstart)=\"mouseDownHandler($event)\" [class.ngx-gallery-active]=\"!loading\" [class.animation]=\"animation\" [class.ngx-gallery-grab]=\"canDragOnZoom()\" [style.transform]=\"getTransform()\" [style.left]=\"positionLeft + 'px'\" [style.top]=\"positionTop + 'px'\"/>\n                <ngx-gallery-bullets *ngIf=\"bullets\" [count]=\"images.length\" [active]=\"index\" (onChange)=\"showAtIndex($event)\"></ngx-gallery-bullets>\n            </div>\n            <div class=\"ngx-gallery-preview-text\" *ngIf=\"showDescription && description\" [innerHTML]=\"description\" (click)=\"$event.stopPropagation()\"></div>\n        </div>\n    `,\n    styleUrls: ['./ngx-gallery-preview.component.scss']\n})\nexport class NgxGalleryPreviewComponent implements OnInit, OnChanges {\n\n    src: SafeUrl;\n    srcIndex: number;\n    description: string;\n    showSpinner = false;\n    positionLeft = 0;\n    positionTop = 0;\n    zoomValue = 1;\n    loading = false;\n    rotateValue = 0;\n    index = 0;\n\n    @Input() images: string[] | SafeResourceUrl[];\n    @Input() descriptions: string[];\n    @Input() showDescription: boolean;\n    @Input() arrows: boolean;\n    @Input() arrowsAutoHide: boolean;\n    @Input() swipe: boolean;\n    @Input() fullscreen: boolean;\n    @Input() forceFullscreen: boolean;\n    @Input() closeOnClick: boolean;\n    @Input() closeOnEsc: boolean;\n    @Input() keyboardNavigation: boolean;\n    @Input() arrowPrevIcon: string;\n    @Input() arrowNextIcon: string;\n    @Input() closeIcon: string;\n    @Input() fullscreenIcon: string;\n    @Input() spinnerIcon: string;\n    @Input() autoPlay: boolean;\n    @Input() autoPlayInterval: number;\n    @Input() autoPlayPauseOnHover: boolean;\n    @Input() infinityMove: boolean;\n    @Input() zoom: boolean;\n    @Input() zoomStep: number;\n    @Input() zoomMax: number;\n    @Input() zoomMin: number;\n    @Input() zoomInIcon: string;\n    @Input() zoomOutIcon: string;\n    @Input() animation: boolean;\n    @Input() actions: NgxGalleryAction[];\n    @Input() rotate: boolean;\n    @Input() rotateLeftIcon: string;\n    @Input() rotateRightIcon: string;\n    @Input() download: boolean;\n    @Input() downloadIcon: string;\n    @Input() bullets: string;\n\n    @Output() onOpen = new EventEmitter();\n    @Output() onClose = new EventEmitter();\n    @Output() onActiveChange = new EventEmitter<number>();\n\n    // @ts-ignore\n    @ViewChild('previewImage') previewImage: ElementRef;\n\n    private isOpen = false;\n    private timer;\n    private initialX = 0;\n    private initialY = 0;\n    private initialLeft = 0;\n    private initialTop = 0;\n    private isMove = false;\n\n    private keyDownListener: Function;\n\n    constructor(private sanitization: DomSanitizer, private elementRef: ElementRef,\n        private helperService: NgxGalleryHelperService, private renderer: Renderer2,\n        private changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        if (this.arrows && this.arrowsAutoHide) {\n            this.arrows = false;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['swipe']) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef,\n            'preview', () => this.showNext(), () => this.showPrev());\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.keyDownListener) {\n            this.keyDownListener();\n        }\n    }\n\n    @HostListener('mouseenter') onMouseEnter() {\n        if (this.arrowsAutoHide && !this.arrows) {\n            this.arrows = true;\n        }\n    }\n\n    @HostListener('mouseleave') onMouseLeave() {\n        if (this.arrowsAutoHide && this.arrows) {\n            this.arrows = false;\n        }\n    }\n\n    onKeyDown(e) {\n        if (this.isOpen) {\n            if (this.keyboardNavigation) {\n                if (this.isKeyboardPrev(e)) {\n                    this.showPrev();\n                } else if (this.isKeyboardNext(e)) {\n                    this.showNext();\n                }\n            }\n            if (this.closeOnEsc && this.isKeyboardEsc(e)) {\n                this.close();\n            }\n        }\n    }\n\n    open(index: number): void {\n        this.onOpen.emit();\n\n        this.index = index;\n        this.isOpen = true;\n        this.show(true);\n\n        if (this.forceFullscreen) {\n            this.manageFullscreen();\n        }\n\n        this.keyDownListener = this.renderer.listen(\"window\", \"keydown\", (e) => this.onKeyDown(e));\n    }\n\n    close(): void {\n        this.isOpen = false;\n        this.closeFullscreen();\n        this.onClose.emit();\n\n        this.stopAutoPlay();\n\n        if (this.keyDownListener) {\n            this.keyDownListener();\n        }\n    }\n\n    imageMouseEnter(): void {\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.stopAutoPlay();\n        }\n    }\n\n    imageMouseLeave(): void {\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.startAutoPlay();\n        }\n    }\n\n    startAutoPlay(): void {\n        if (this.autoPlay) {\n            this.stopAutoPlay();\n\n            this.timer = setTimeout(() => {\n                if (!this.showNext()) {\n                    this.index = -1;\n                    this.showNext();\n                }\n            }, this.autoPlayInterval);\n        }\n    }\n\n    stopAutoPlay(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    }\n\n    showAtIndex(index: number): void {\n        this.index = index;\n        this.show();\n    }\n\n    showNext(): boolean {\n        if (this.canShowNext()) {\n            this.index++;\n\n            if (this.index === this.images.length) {\n                this.index = 0;\n            }\n\n            this.show();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    showPrev(): void {\n        if (this.canShowPrev()) {\n            this.index--;\n\n            if (this.index < 0) {\n                this.index = this.images.length - 1;\n            }\n\n            this.show();\n        }\n    }\n\n    canShowNext(): boolean {\n        if (this.loading) {\n            return false;\n        } else if (this.images) {\n            return this.infinityMove || this.index < this.images.length - 1 ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    canShowPrev(): boolean {\n        if (this.loading) {\n            return false;\n        } else if (this.images) {\n            return this.infinityMove || this.index > 0 ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    manageFullscreen(): void {\n        if (this.fullscreen || this.forceFullscreen) {\n            const doc = <any>document;\n\n            if (!doc.fullscreenElement && !doc.mozFullScreenElement\n                && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n                this.openFullscreen();\n            } else {\n                this.closeFullscreen();\n            }\n        }\n    }\n\n    getSafeUrl(image: string): SafeUrl {\n        return image.substr(0, 10) === 'data:image' ?\n            image : this.sanitization.bypassSecurityTrustUrl(image);\n    }\n\n    zoomIn(): void {\n        if (this.canZoomIn()) {\n            this.zoomValue += this.zoomStep;\n\n            if (this.zoomValue > this.zoomMax) {\n                this.zoomValue = this.zoomMax;\n            }\n        }\n    }\n\n    zoomOut(): void {\n        if (this.canZoomOut()) {\n            this.zoomValue -= this.zoomStep;\n\n            if (this.zoomValue < this.zoomMin) {\n                this.zoomValue = this.zoomMin;\n            }\n\n            if (this.zoomValue <= 1) {\n                this.resetPosition()\n            }\n        }\n    }\n\n    rotateLeft(): void {\n        this.rotateValue -= 90;\n    }\n\n    rotateRight(): void {\n        this.rotateValue += 90;\n    }\n\n    getTransform(): SafeStyle {\n        return this.sanitization.bypassSecurityTrustStyle('scale(' + this.zoomValue + ') rotate(' + this.rotateValue + 'deg)');\n    }\n\n    canZoomIn(): boolean {\n        return this.zoomValue < this.zoomMax ? true : false;\n    }\n\n    canZoomOut(): boolean {\n        return this.zoomValue > this.zoomMin ? true : false;\n    }\n\n    canDragOnZoom() {\n        return this.zoom && this.zoomValue > 1;\n    }\n\n    mouseDownHandler(e): void {\n        if (this.canDragOnZoom()) {\n            this.initialX = this.getClientX(e);\n            this.initialY = this.getClientY(e);\n            this.initialLeft = this.positionLeft;\n            this.initialTop = this.positionTop;\n            this.isMove = true;\n\n            e.preventDefault();\n        }\n    }\n\n    mouseUpHandler(e): void {\n        this.isMove = false;\n    }\n\n    mouseMoveHandler(e) {\n        if (this.isMove) {\n            this.positionLeft = this.initialLeft + (this.getClientX(e) - this.initialX);\n            this.positionTop = this.initialTop + (this.getClientY(e) - this.initialY);\n        }\n    }\n\n    private getClientX(e): number {\n        return e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    }\n\n    private getClientY(e): number {\n        return e.touches && e.touches.length ? e.touches[0].clientY : e.clientY;\n    }\n\n    private resetPosition() {\n        if (this.zoom) {\n            this.positionLeft = 0;\n            this.positionTop = 0;\n        }\n    }\n\n    private isKeyboardNext(e): boolean {\n        return e.keyCode === 39 ? true : false;\n    }\n\n    private isKeyboardPrev(e): boolean {\n        return e.keyCode === 37 ? true : false;\n    }\n\n    private isKeyboardEsc(e): boolean {\n        return e.keyCode === 27 ? true : false;\n    }\n\n    private openFullscreen(): void {\n        const element = <any>document.documentElement;\n\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen();\n        }\n    }\n\n    private closeFullscreen(): void {\n        if (this.isFullscreen()) {\n            const doc = <any>document;\n\n            if (doc.exitFullscreen) {\n                doc.exitFullscreen();\n            } else if (doc.msExitFullscreen) {\n                doc.msExitFullscreen();\n            } else if (doc.mozCancelFullScreen) {\n                doc.mozCancelFullScreen();\n            } else if (doc.webkitExitFullscreen) {\n                doc.webkitExitFullscreen();\n            }\n        }\n    }\n\n    private isFullscreen() {\n        const doc = <any>document;\n\n        return doc.fullscreenElement || doc.webkitFullscreenElement\n            || doc.mozFullScreenElement || doc.msFullscreenElement;\n    }\n\n\n\n    private show(first = false) {\n        this.loading = true;\n        this.stopAutoPlay();\n\n        this.onActiveChange.emit(this.index);\n\n        if (first || !this.animation) {\n            this._show();\n        } else {\n            setTimeout(() => this._show(), 600);\n        }\n    }\n\n    private _show() {\n        this.zoomValue = 1;\n        this.rotateValue = 0;\n        this.resetPosition();\n\n        this.src = this.getSafeUrl(<string>this.images[this.index]);\n        this.srcIndex = this.index;\n        this.description = this.descriptions[this.index];\n        this.changeDetectorRef.markForCheck();\n\n        setTimeout(() => {\n            if (this.isLoaded(this.previewImage.nativeElement)) {\n                this.loading = false;\n                this.startAutoPlay();\n                this.changeDetectorRef.markForCheck();\n            } else {\n                setTimeout(() => {\n                    if (this.loading) {\n                        this.showSpinner = true;\n                        this.changeDetectorRef.markForCheck();\n                    }\n                })\n\n                this.previewImage.nativeElement.onload = () => {\n                    this.loading = false;\n                    this.showSpinner = false;\n                    this.previewImage.nativeElement.onload = null;\n                    this.startAutoPlay();\n                    this.changeDetectorRef.markForCheck();\n                }\n            }\n        })\n    }\n\n    private isLoaded(img): boolean {\n        if (!img.complete) {\n            return false;\n        }\n\n        if (typeof img.naturalWidth !== 'undefined' && img.naturalWidth === 0) {\n            return false;\n        }\n\n        return true;\n    }\n}\n","export class NgxGalleryImageSize {\n    static Cover = 'cover';\n    static Contain = 'contain';\n}\n","export class NgxGalleryLayout {\n    static ThumbnailsTop = 'thumbnails-top';\n    static ThumbnailsBottom = 'thumbnails-bottom';\n}\n","export interface INgxGalleryAction {\n    icon: string;\n    disabled?: boolean;\n    titleText?: string;\n\n    onClick: (event: Event, index: number) => void;\n}\n\nexport class NgxGalleryAction implements INgxGalleryAction {\n    icon: string;\n    disabled?: boolean;\n    titleText?: string;\n\n    onClick: (event: Event, index: number) => void;\n\n    constructor(action: INgxGalleryAction) {\n        this.icon = action.icon;\n        this.disabled = action.disabled ? action.disabled : false;\n        this.titleText = action.titleText ? action.titleText : '';\n\n        this.onClick = action.onClick;\n    }\n}\n","import { NgxGalleryAnimation } from './ngx-gallery-animation.model';\nimport { NgxGalleryImageSize } from './ngx-gallery-image-size.model';\nimport { NgxGalleryLayout } from './ngx-gallery-layout.model';\nimport { NgxGalleryOrder } from './ngx-gallery-order.model';\nimport { NgxGalleryAction } from './ngx-gallery-action.model';\nimport {Input} from '@angular/core';\n\nexport interface INgxGalleryOptions {\n    width?: string;\n    height?: string;\n    breakpoint?: number;\n    fullWidth?: boolean;\n    layout?: string;\n    startIndex?: number;\n    linkTarget?: string;\n    lazyLoading?: boolean;\n    image?: boolean;\n    imagePercent?: number;\n    imageArrows?: boolean;\n    imageArrowsAutoHide?: boolean;\n    imageSwipe?: boolean;\n    imageAnimation?: string;\n    imageSize?: string;\n    imageAutoPlay?: boolean;\n    imageAutoPlayInterval?: number;\n    imageAutoPlayPauseOnHover?: boolean;\n    imageInfinityMove?: boolean;\n    imageActions?: NgxGalleryAction[];\n    imageDescription?: boolean;\n    imageBullets?: boolean;\n    thumbnails?: boolean;\n    thumbnailsColumns?: number;\n    thumbnailsRows?: number;\n    thumbnailsPercent?: number;\n    thumbnailsMargin?: number;\n    thumbnailsArrows?: boolean;\n    thumbnailsArrowsAutoHide?: boolean;\n    thumbnailsSwipe?: boolean;\n    thumbnailsMoveSize?: number;\n    thumbnailsOrder?: NgxGalleryOrder;\n    thumbnailsRemainingCount?: boolean;\n    thumbnailsAsLinks?: boolean;\n    thumbnailsAutoHide?: boolean;\n    thumbnailMargin?: number;\n    thumbnailSize?: string;\n    thumbnailActions?: NgxGalleryAction[];\n    preview?: boolean;\n    previewDescription?: boolean;\n    previewArrows?: boolean;\n    previewArrowsAutoHide?: boolean;\n    previewSwipe?: boolean;\n    previewFullscreen?: boolean;\n    previewForceFullscreen?: boolean;\n    previewCloseOnClick?: boolean;\n    previewCloseOnEsc?: boolean;\n    previewKeyboardNavigation?: boolean;\n    previewAnimation?: boolean;\n    previewAutoPlay?: boolean;\n    previewAutoPlayInterval?: number;\n    previewAutoPlayPauseOnHover?: boolean;\n    previewInfinityMove?: boolean;\n    previewZoom?: boolean;\n    previewZoomStep?: number;\n    previewZoomMax?: number;\n    previewZoomMin?: number;\n    previewRotate?: boolean;\n    previewDownload?: boolean;\n    previewCustom?: (index: number) => void;\n    previewBullets?: boolean;\n    arrowPrevIcon?: string;\n    arrowNextIcon?: string;\n    closeIcon?: string;\n    fullscreenIcon?: string;\n    spinnerIcon?: string;\n    zoomInIcon?: string;\n    zoomOutIcon?: string;\n    rotateLeftIcon?: string;\n    rotateRightIcon?: string;\n    downloadIcon?: string;\n    previewPrevIconOption?: string;\n    previewNextIconOption?: string;\n    actions?: NgxGalleryAction[];\n}\n\nexport class NgxGalleryOptions implements INgxGalleryOptions {\n    width?: string;\n    height?: string;\n    breakpoint?: number;\n    fullWidth?: boolean;\n    layout?: string;\n    startIndex?: number;\n    linkTarget?: string;\n    lazyLoading?: boolean;\n    image?: boolean;\n    imagePercent?: number;\n    imageArrows?: boolean;\n    imageArrowsAutoHide?: boolean;\n    imageSwipe?: boolean;\n    imageAnimation?: string;\n    imageSize?: string;\n    imageAutoPlay?: boolean;\n    imageAutoPlayInterval?: number;\n    imageAutoPlayPauseOnHover?: boolean;\n    imageInfinityMove?: boolean;\n    imageActions?: NgxGalleryAction[];\n    imageDescription?: boolean;\n    imageBullets?: boolean;\n    thumbnails?: boolean;\n    thumbnailsColumns?: number;\n    thumbnailsRows?: number;\n    thumbnailsPercent?: number;\n    thumbnailsMargin?: number;\n    thumbnailsArrows?: boolean;\n    thumbnailsArrowsAutoHide?: boolean;\n    thumbnailsSwipe?: boolean;\n    thumbnailsMoveSize?: number;\n    thumbnailsOrder?: NgxGalleryOrder;\n    thumbnailsRemainingCount?: boolean;\n    thumbnailsAsLinks?: boolean;\n    thumbnailsAutoHide?: boolean;\n    thumbnailMargin?: number;\n    thumbnailSize?: string;\n    thumbnailActions?: NgxGalleryAction[];\n    preview?: boolean;\n    previewDescription?: boolean;\n    previewArrows?: boolean;\n    previewArrowsAutoHide?: boolean;\n    previewSwipe?: boolean;\n    previewFullscreen?: boolean;\n    previewForceFullscreen?: boolean;\n    previewCloseOnClick?: boolean;\n    previewCloseOnEsc?: boolean;\n    previewKeyboardNavigation?: boolean;\n    previewAnimation?: boolean;\n    previewAutoPlay?: boolean;\n    previewAutoPlayInterval?: number;\n    previewAutoPlayPauseOnHover?: boolean;\n    previewInfinityMove?: boolean;\n    previewZoom?: boolean;\n    previewZoomStep?: number;\n    previewZoomMax?: number;\n    previewZoomMin?: number;\n    previewRotate?: boolean;\n    previewDownload?: boolean;\n    previewCustom?: (index: number) => void;\n    previewBullets?: boolean;\n    arrowPrevIcon?: string;\n    arrowNextIcon?: string;\n    closeIcon?: string;\n    fullscreenIcon?: string;\n    spinnerIcon?: string;\n    zoomInIcon?: string;\n    zoomOutIcon?: string;\n    rotateLeftIcon?: string;\n    rotateRightIcon?: string;\n    downloadIcon?: string;\n    previewPrevIconOption?: string;\n    previewNextIconOption?: string;\n    actions?: NgxGalleryAction[];\n\n    constructor(obj: INgxGalleryOptions) {\n\n        const preventDefaults = obj.breakpoint === undefined ? false : true;\n\n        function use<T>(source: T, defaultValue: T): T {\n            return obj && (source !== undefined || preventDefaults) ? source : defaultValue;\n        }\n\n        this.breakpoint = use(obj.breakpoint, undefined);\n        this.width = use(obj.width, '500px');\n        this.height = use(obj.height, '400px');\n        this.fullWidth = use(obj.fullWidth, false);\n        this.layout = use(obj.layout, NgxGalleryLayout.ThumbnailsBottom);\n        this.startIndex = use(obj.startIndex, 0);\n        this.linkTarget = use(obj.linkTarget, '_blank');\n        this.lazyLoading = use(obj.lazyLoading, true);\n\n        this.image = use(obj.image, true);\n        this.imagePercent = use(obj.imagePercent, 75);\n        this.imageArrows = use(obj.imageArrows, true);\n        this.imageArrowsAutoHide = use(obj.imageArrowsAutoHide, false);\n        this.imageSwipe = use(obj.imageSwipe, false);\n        this.imageAnimation = use(obj.imageAnimation, NgxGalleryAnimation.Fade);\n        this.imageSize = use(obj.imageSize, NgxGalleryImageSize.Cover);\n        this.imageAutoPlay = use(obj.imageAutoPlay, false);\n        this.imageAutoPlayInterval = use(obj.imageAutoPlayInterval, 2000);\n        this.imageAutoPlayPauseOnHover = use(obj.imageAutoPlayPauseOnHover, false);\n        this.imageInfinityMove = use(obj.imageInfinityMove, false);\n        if (obj && obj.imageActions && obj.imageActions.length) {\n            obj.imageActions = obj.imageActions.map(action => new NgxGalleryAction(action));\n        }\n        this.imageActions = use(obj.imageActions, []);\n        this.imageDescription = use(obj.imageDescription, false);\n        this.imageBullets = use(obj.imageBullets, false);\n\n        this.thumbnails = use(obj.thumbnails, true);\n        this.thumbnailsColumns = use(obj.thumbnailsColumns, 4);\n        this.thumbnailsRows = use(obj.thumbnailsRows, 1);\n        this.thumbnailsPercent = use(obj.thumbnailsPercent, 25);\n        this.thumbnailsMargin = use(obj.thumbnailsMargin, 10);\n        this.thumbnailsArrows = use(obj.thumbnailsArrows, true);\n        this.thumbnailsArrowsAutoHide = use(obj.thumbnailsArrowsAutoHide, false);\n        this.thumbnailsSwipe = use(obj.thumbnailsSwipe, false);\n        this.thumbnailsMoveSize = use(obj.thumbnailsMoveSize, 1);\n        this.thumbnailsOrder = use(obj.thumbnailsOrder, NgxGalleryOrder.Column);\n        this.thumbnailsRemainingCount = use(obj.thumbnailsRemainingCount, false);\n        this.thumbnailsAsLinks = use(obj.thumbnailsAsLinks, false);\n        this.thumbnailsAutoHide = use(obj.thumbnailsAutoHide, false);\n        this.thumbnailMargin = use(obj.thumbnailMargin, 10);\n        this.thumbnailSize = use(obj.thumbnailSize, NgxGalleryImageSize.Cover);\n        if (obj && obj.thumbnailActions && obj.thumbnailActions.length) {\n            obj.thumbnailActions = obj.thumbnailActions.map(action => new NgxGalleryAction(action));\n        }\n        this.thumbnailActions = use(obj.thumbnailActions, []);\n\n        this.preview = use(obj.preview, true);\n        this.previewDescription = use(obj.previewDescription, true);\n        this.previewArrows = use(obj.previewArrows, true);\n        this.previewArrowsAutoHide = use(obj.previewArrowsAutoHide, false);\n        this.previewSwipe = use(obj.previewSwipe, false);\n        this.previewFullscreen = use(obj.previewFullscreen, false);\n        this.previewForceFullscreen = use(obj.previewForceFullscreen, false);\n        this.previewCloseOnClick = use(obj.previewCloseOnClick, false);\n        this.previewCloseOnEsc = use(obj.previewCloseOnEsc, false);\n        this.previewKeyboardNavigation = use(obj.previewKeyboardNavigation, false);\n        this.previewAnimation = use(obj.previewAnimation, true);\n        this.previewAutoPlay = use(obj.previewAutoPlay, false);\n        this.previewAutoPlayInterval = use(obj.previewAutoPlayInterval, 2000);\n        this.previewAutoPlayPauseOnHover = use(obj.previewAutoPlayPauseOnHover, false);\n        this.previewInfinityMove = use(obj.previewInfinityMove, false);\n        this.previewZoom = use(obj.previewZoom, false);\n        this.previewZoomStep = use(obj.previewZoomStep, 0.1);\n        this.previewZoomMax = use(obj.previewZoomMax, 2);\n        this.previewZoomMin = use(obj.previewZoomMin, 0.5);\n        this.previewRotate = use(obj.previewRotate, false);\n        this.previewDownload = use(obj.previewDownload, false);\n        this.previewCustom = use(obj.previewCustom, undefined);\n        this.previewBullets = use(obj.previewBullets, false);\n\n        // this.arrowPrevIcon = use(obj.arrowPrevIcon, 'fa fa-arrow-circle-left');\n        // this.arrowNextIcon = use(obj.arrowNextIcon, 'fa fa-arrow-circle-right');\n        // this.closeIcon = use(obj.closeIcon, 'fa fa-times-circle');\n        // this.fullscreenIcon = use(obj.fullscreenIcon, 'fa fa-arrows-alt');\n        // this.spinnerIcon = use(obj.spinnerIcon, 'fa fa-spinner fa-pulse fa-3x fa-fw');\n        // this.zoomInIcon = use(obj.zoomInIcon, 'fa fa-search-plus');\n        // this.zoomOutIcon = use(obj.zoomOutIcon, 'fa fa-search-minus');\n        // this.rotateLeftIcon = use(obj.rotateLeftIcon, 'fa fa-undo');\n        // this.rotateRightIcon = use(obj.rotateRightIcon, 'fa fa-repeat');\n        // this.downloadIcon = use(obj.downloadIcon, 'fa fa-arrow-circle-down');\n\n        this.arrowPrevIcon = use(obj.arrowPrevIcon, 'arrow_back_ios');\n        this.arrowNextIcon = use(obj.arrowNextIcon, 'arrow_forward_ios');\n        this.closeIcon = use(obj.closeIcon, 'close');\n        this.fullscreenIcon = use(obj.fullscreenIcon, 'fullscreen');\n        this.spinnerIcon = use(obj.spinnerIcon, 'spinner');\n        this.zoomInIcon = use(obj.zoomInIcon, 'zoom_in');\n        this.zoomOutIcon = use(obj.zoomOutIcon, 'zoom_out');\n        this.rotateLeftIcon = use(obj.rotateLeftIcon, 'rotate_left');\n        this.rotateRightIcon = use(obj.rotateRightIcon, 'rotate_right');\n        this.downloadIcon = use(obj.downloadIcon, 'cloud_download');\n        this.previewPrevIconOption = use(obj.previewPrevIconOption, 'arrow_back_ios');\n        this.previewNextIconOption = use(obj.previewNextIconOption, 'arrow_forward_ios');\n\n        if (obj && obj.actions && obj.actions.length) {\n            obj.actions = obj.actions.map(action => new NgxGalleryAction(action));\n        }\n        this.actions = use(obj.actions, []);\n    }\n}\n","import { SafeResourceUrl } from '@angular/platform-browser';\n\nexport interface INgxGalleryOrderedImage {\n    src: string | SafeResourceUrl;\n    index: number;\n}\n\nexport class NgxGalleryOrderedImage implements INgxGalleryOrderedImage {\n    src: string | SafeResourceUrl;\n    index: number;\n\n    constructor(obj: INgxGalleryOrderedImage) {\n        this.src = obj.src;\n        this.index = obj.index;\n    }\n}\n","import { Component, Input, HostListener, ViewChild, OnInit,\n    HostBinding, DoCheck, ElementRef, AfterViewInit, Output, EventEmitter } from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\n\nimport { NgxGalleryPreviewComponent } from './ngx-gallery-preview.component';\nimport { NgxGalleryImageComponent } from './ngx-gallery-image.component';\nimport { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails.component';\nimport { NgxGalleryHelperService } from './ngx-gallery-helper.service';\n\nimport { NgxGalleryOptions } from './ngx-gallery-options.model';\nimport { NgxGalleryImage } from './ngx-gallery-image.model';\nimport { NgxGalleryLayout } from './ngx-gallery-layout.model';\nimport { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image.model';\n\n@Component({\n    selector: 'ngx-gallery',\n    template: `\n    <div class=\"ngx-gallery-layout {{currentOptions?.layout}}\">\n        <ngx-gallery-image *ngIf=\"currentOptions?.image\" [style.height]=\"getImageHeight()\" [images]=\"mediumImages\" [clickable]=\"currentOptions?.preview\" [selectedIndex]=\"selectedIndex\" [arrows]=\"currentOptions?.imageArrows\" [arrowsAutoHide]=\"currentOptions?.imageArrowsAutoHide\" [arrowPrevIcon]=\"currentOptions?.arrowPrevIcon\" [arrowNextIcon]=\"currentOptions?.arrowNextIcon\" [swipe]=\"currentOptions?.imageSwipe\" [animation]=\"currentOptions?.imageAnimation\" [size]=\"currentOptions?.imageSize\" [autoPlay]=\"currentOptions?.imageAutoPlay\" [autoPlayInterval]=\"currentOptions?.imageAutoPlayInterval\" [autoPlayPauseOnHover]=\"currentOptions?.imageAutoPlayPauseOnHover\" [infinityMove]=\"currentOptions?.imageInfinityMove\"  [lazyLoading]=\"currentOptions?.lazyLoading\" [actions]=\"currentOptions?.imageActions\" [descriptions]=\"descriptions\" [showDescription]=\"currentOptions?.imageDescription\" [bullets]=\"currentOptions?.imageBullets\" (onClick)=\"openPreview($event)\" (onActiveChange)=\"selectFromImage($event)\"></ngx-gallery-image>\n\n        <ngx-gallery-thumbnails *ngIf=\"currentOptions?.thumbnails\" [style.marginTop]=\"getThumbnailsMarginTop()\" [style.marginBottom]=\"getThumbnailsMarginBottom()\" [style.height]=\"getThumbnailsHeight()\" [images]=\"smallImages\" [links]=\"currentOptions?.thumbnailsAsLinks ? links : []\" [labels]=\"labels\" [linkTarget]=\"currentOptions?.linkTarget\" [selectedIndex]=\"selectedIndex\" [columns]=\"currentOptions?.thumbnailsColumns\" [rows]=\"currentOptions?.thumbnailsRows\" [margin]=\"currentOptions?.thumbnailMargin\" [arrows]=\"currentOptions?.thumbnailsArrows\" [arrowsAutoHide]=\"currentOptions?.thumbnailsArrowsAutoHide\" [arrowPrevIcon]=\"currentOptions?.arrowPrevIcon\" [arrowNextIcon]=\"currentOptions?.arrowNextIcon\" [clickable]=\"currentOptions?.image || currentOptions?.preview\" [swipe]=\"currentOptions?.thumbnailsSwipe\" [size]=\"currentOptions?.thumbnailSize\" [moveSize]=\"currentOptions?.thumbnailsMoveSize\" [order]=\"currentOptions?.thumbnailsOrder\" [remainingCount]=\"currentOptions?.thumbnailsRemainingCount\" [lazyLoading]=\"currentOptions?.lazyLoading\" [actions]=\"currentOptions?.thumbnailActions\"  (onActiveChange)=\"selectFromThumbnails($event)\"></ngx-gallery-thumbnails>\n\n        <ngx-gallery-preview [images]=\"bigImages\" [descriptions]=\"descriptions\" [arrowPrevIcon]=\"currentOptions?.previewPrevIconOption\" [arrowNextIcon]=\"currentOptions?.previewNextIconOption\" [closeIcon]=\"currentOptions?.closeIcon\" [fullscreenIcon]=\"currentOptions?.fullscreenIcon\" [spinnerIcon]=\"currentOptions?.spinnerIcon\" [arrows]=\"currentOptions?.previewArrows\" [arrowsAutoHide]=\"currentOptions?.previewArrowsAutoHide\" [swipe]=\"currentOptions?.previewSwipe\" [fullscreen]=\"currentOptions?.previewFullscreen\" [forceFullscreen]=\"currentOptions?.previewForceFullscreen\" [closeOnClick]=\"currentOptions?.previewCloseOnClick\" [closeOnEsc]=\"currentOptions?.previewCloseOnEsc\" [keyboardNavigation]=\"currentOptions?.previewKeyboardNavigation\" [animation]=\"currentOptions?.previewAnimation\" [autoPlay]=\"currentOptions?.previewAutoPlay\" [autoPlayInterval]=\"currentOptions?.previewAutoPlayInterval\" [autoPlayPauseOnHover]=\"currentOptions?.previewAutoPlayPauseOnHover\" [infinityMove]=\"currentOptions?.imageInfinityMove\" [zoom]=\"currentOptions?.previewZoom\" [zoomStep]=\"currentOptions?.previewZoomStep\" [zoomMax]=\"currentOptions?.previewZoomMax\" [zoomMin]=\"currentOptions?.previewZoomMin\" [zoomInIcon]=\"currentOptions?.zoomInIcon\" [zoomOutIcon]=\"currentOptions?.zoomOutIcon\" [actions]=\"currentOptions?.actions\" [rotate]=\"currentOptions?.previewRotate\" [rotateLeftIcon]=\"currentOptions?.rotateLeftIcon\" [rotateRightIcon]=\"currentOptions?.rotateRightIcon\" [download]=\"currentOptions?.previewDownload\" [downloadIcon]=\"currentOptions?.downloadIcon\" [bullets]=\"currentOptions?.previewBullets\" (onClose)=\"onPreviewClose()\" (onOpen)=\"onPreviewOpen()\" (onActiveChange)=\"previewSelect($event)\" [class.ngx-gallery-active]=\"previewEnabled\" [showDescription]=\"currentOptions?.imageDescription\"></ngx-gallery-preview>\n    </div>\n    `,\n    styleUrls: ['./ngx-gallery.component.scss'],\n    providers: [NgxGalleryHelperService]\n})\nexport class NgxGalleryComponent implements OnInit, DoCheck, AfterViewInit   {\n    @Input() options: NgxGalleryOptions[];\n    @Input() images: NgxGalleryImage[];\n\n    @Output() imagesReady = new EventEmitter();\n    @Output() change = new EventEmitter<{ index: number; image: NgxGalleryImage; }>();\n    @Output() previewOpen = new EventEmitter();\n    @Output() previewClose = new EventEmitter();\n    @Output() previewChange = new EventEmitter<{ index: number; image: NgxGalleryImage; }>();\n\n    @Input() widthOption: string;\n    @Input() heightOption: string;\n    @Input() thumbnailsColumnsOption: number;\n    @Input() startIndexOption: number;\n    @Input() imageDescriptionOption: boolean;\n    @Input() imageArrowsOption: boolean;\n    @Input() thumbnailsArrowsOption: boolean;\n    @Input() previewArrowsOption: boolean;\n    @Input() imageSwipeOption: boolean;\n    @Input() thumbnailsSwipeOption: boolean;\n    @Input() previewSwipeOption: boolean;\n    @Input() imageAutoPlayOption: boolean;\n    @Input() imageAutoPlayIntervalOption: number;\n    @Input() imageAutoPlayPauseOnHoverOption: boolean;\n    @Input() imageInfinityMoveOption: boolean;\n    @Input() previewOption: boolean;\n    @Input() arrowPrevIconOption: string;\n    @Input() arrowNextIconOption: string;\n    @Input() previewPrevIconOption: string;\n    @Input() previewNextIconOption: string;\n    @Input() thumbnailsOption: boolean;\n\n  smallImages: string[] | SafeResourceUrl[];\n    mediumImages: NgxGalleryOrderedImage[];\n    bigImages: string[] | SafeResourceUrl[];\n    descriptions: string[];\n    links: string[];\n    labels: string[];\n\n    oldImages: NgxGalleryImage[];\n    oldImagesLength = 0;\n\n    selectedIndex = 0;\n    previewEnabled: boolean;\n\n    currentOptions: NgxGalleryOptions;\n\n    private breakpoint: number | undefined = undefined;\n    private prevBreakpoint: number | undefined = undefined;\n    private fullWidthTimeout: any;\n\n    // @ts-ignore\n    @ViewChild(NgxGalleryPreviewComponent) preview: NgxGalleryPreviewComponent;\n    // @ts-ignore\n    @ViewChild(NgxGalleryImageComponent) image: NgxGalleryImageComponent;\n    // @ts-ignore\n    @ViewChild(NgxGalleryThumbnailsComponent) thubmnails: NgxGalleryThumbnailsComponent;\n\n    @HostBinding('style.width') width: string;\n    @HostBinding('style.height') height: string;\n    @HostBinding('style.left') left: string;\n\n    constructor(private myElement: ElementRef) {}\n\n    ngOnInit() {\n      const tempOptions = [{\n        width: this.widthOption,\n        height: this.heightOption,\n        thumbnails: this.thumbnailsOption,\n        thumbnailsColumns: this.thumbnailsColumnsOption,\n        startIndex: this.startIndexOption,\n        imageDescription: this.imageDescriptionOption,\n        imageArrows: this.imageArrowsOption,\n        thumbnailsArrows: this.thumbnailsArrowsOption,\n        previewArrows: this.previewArrowsOption,\n        imageSwipe: this.imageSwipeOption,\n        thumbnailsSwipe: this.thumbnailsSwipeOption,\n        previewSwipe: this.previewSwipeOption,\n        imageAutoPlay: this.imageAutoPlayOption,\n        imageAutoPlayInterval: this.imageAutoPlayIntervalOption,\n        imageAutoPlayPauseOnHover: this.imageAutoPlayPauseOnHoverOption,\n        imageInfinityMove: this.imageInfinityMoveOption,\n        preview: this.previewOption,\n        arrowPrevIcon: this.arrowPrevIconOption,\n        arrowNextIcon: this.arrowNextIconOption,\n        previewPrevIconOption: this.previewPrevIconOption,\n        previewNextIconOption: this.previewNextIconOption\n      }];\n\n        // this.options = this.options.map((opt) => new NgxGalleryOptions(opt));\n        this.options = tempOptions.map((opt) => new NgxGalleryOptions(opt));\n\n        this.sortOptions();\n        this.setBreakpoint();\n        this.setOptions();\n        this.checkFullWidth();\n        if (this.currentOptions) {\n            this.selectedIndex = <number>this.currentOptions.startIndex;\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this.images !== undefined && (this.images.length !== this.oldImagesLength)\n            || (this.images !== this.oldImages)) {\n            this.oldImagesLength = this.images.length;\n            this.oldImages = this.images;\n            this.setOptions();\n            this.setImages();\n\n            if (this.images && this.images.length) {\n                this.imagesReady.emit();\n            }\n\n            if (this.image) {\n                this.image.reset(<number>this.currentOptions.startIndex);\n            }\n\n            if (this.currentOptions.thumbnailsAutoHide && this.currentOptions.thumbnails\n                && this.images.length <= 1) {\n                this.currentOptions.thumbnails = false;\n                this.currentOptions.imageArrows = false;\n            }\n\n            this.resetThumbnails();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        this.checkFullWidth();\n    }\n\n    @HostListener('window:resize') onResize() {\n        this.setBreakpoint();\n\n        if (this.prevBreakpoint !== this.breakpoint) {\n            this.setOptions();\n            this.resetThumbnails();\n        }\n\n        if (this.currentOptions && this.currentOptions.fullWidth) {\n\n            if (this.fullWidthTimeout) {\n                clearTimeout(this.fullWidthTimeout);\n            }\n\n            this.fullWidthTimeout = setTimeout(() => {\n                this.checkFullWidth();\n            }, 200);\n        }\n    }\n\n    getImageHeight(): string {\n        return (this.currentOptions && this.currentOptions.thumbnails) ?\n            this.currentOptions.imagePercent + '%' : '100%';\n    }\n\n    getThumbnailsHeight(): string {\n        if (this.currentOptions && this.currentOptions.image) {\n            return 'calc(' + this.currentOptions.thumbnailsPercent + '% - '\n            + this.currentOptions.thumbnailsMargin + 'px)';\n        } else {\n            return '100%';\n        }\n    }\n\n    getThumbnailsMarginTop(): string {\n        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsBottom) {\n            return this.currentOptions.thumbnailsMargin + 'px';\n        } else {\n            return '0px';\n        }\n    }\n\n    getThumbnailsMarginBottom(): string {\n        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsTop) {\n            return this.currentOptions.thumbnailsMargin + 'px';\n        } else {\n            return '0px';\n        }\n    }\n\n    openPreview(index: number): void {\n        if (this.currentOptions.previewCustom) {\n            this.currentOptions.previewCustom(index);\n        } else {\n            this.previewEnabled = true;\n            this.preview.open(index);\n        }\n    }\n\n    onPreviewOpen(): void {\n        this.previewOpen.emit();\n\n        if (this.image && this.image.autoPlay) {\n            this.image.stopAutoPlay();\n        }\n    }\n\n    onPreviewClose(): void {\n        this.previewEnabled = false;\n        this.previewClose.emit();\n\n        if (this.image && this.image.autoPlay) {\n            this.image.startAutoPlay();\n        }\n    }\n\n    selectFromImage(index: number) {\n        this.select(index);\n    }\n\n    selectFromThumbnails(index: number) {\n        this.select(index);\n\n        if (this.currentOptions && this.currentOptions.thumbnails && this.currentOptions.preview\n            && (!this.currentOptions.image || this.currentOptions.thumbnailsRemainingCount)) {\n            this.openPreview(this.selectedIndex);\n        }\n    }\n\n    show(index: number): void {\n        this.select(index);\n    }\n\n    showNext(): void {\n        this.image.showNext();\n    }\n\n    showPrev(): void {\n        this.image.showPrev();\n    }\n\n    canShowNext(): boolean {\n        if (this.images && this.currentOptions) {\n            return (this.currentOptions.imageInfinityMove || this.selectedIndex < this.images.length - 1)\n                ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    canShowPrev(): boolean {\n        if (this.images && this.currentOptions) {\n            return (this.currentOptions.imageInfinityMove || this.selectedIndex > 0) ? true : false;\n        } else {\n            return false;\n        }\n    }\n\n    previewSelect(index: number) {\n        this.previewChange.emit({index, image: this.images[index]});\n    }\n\n    moveThumbnailsRight() {\n        this.thubmnails.moveRight();\n    }\n\n    moveThumbnailsLeft() {\n        this.thubmnails.moveLeft();\n    }\n\n    canMoveThumbnailsRight() {\n        return this.thubmnails.canMoveRight();\n    }\n\n    canMoveThumbnailsLeft() {\n        return this.thubmnails.canMoveLeft();\n    }\n\n    private resetThumbnails() {\n        if (this.thubmnails) {\n            this.thubmnails.reset(<number>this.currentOptions.startIndex);\n        }\n    }\n\n    private select(index: number) {\n        this.selectedIndex = index;\n\n        this.change.emit({\n            index,\n            image: this.images[index]\n        });\n    }\n\n    private checkFullWidth(): void {\n        if (this.currentOptions && this.currentOptions.fullWidth) {\n            this.width = document.body.clientWidth + 'px';\n            this.left = (-(document.body.clientWidth -\n                this.myElement.nativeElement.parentNode.innerWidth) / 2) + 'px';\n        }\n    }\n\n    private setImages(): void {\n        this.smallImages = this.images.map((img) => <string>img.small);\n        this.mediumImages = this.images.map((img, i) => new NgxGalleryOrderedImage({\n            src: img.medium,\n            index: i\n        }));\n        this.bigImages = this.images.map((img) => <string>img.big);\n        this.descriptions = this.images.map((img) => <string>img.description);\n        this.links = this.images.map((img) => <string>img.url);\n        this.labels = this.images.map((img) => <string>img.label);\n    }\n\n    private setBreakpoint(): void {\n        this.prevBreakpoint = this.breakpoint;\n        let breakpoints;\n\n        if (typeof window !== 'undefined') {\n            breakpoints = this.options.filter((opt) => opt.breakpoint >= window.innerWidth)\n                .map((opt) => opt.breakpoint);\n        }\n\n        if (breakpoints && breakpoints.length) {\n            this.breakpoint = breakpoints.pop();\n        } else {\n            this.breakpoint = undefined;\n        }\n    }\n\n    private sortOptions(): void {\n        this.options = [\n            ...this.options.filter((a) => a.breakpoint === undefined),\n            ...this.options\n                .filter((a) => a.breakpoint !== undefined)\n                .sort((a, b) => b.breakpoint - a.breakpoint)\n        ];\n    }\n\n    private setOptions(): void {\n        this.currentOptions = new NgxGalleryOptions({});\n\n        this.options\n            .filter((opt) => opt.breakpoint === undefined || opt.breakpoint >= this.breakpoint)\n            .map((opt) => this.combineOptions(this.currentOptions, opt));\n\n        this.width = <string>this.currentOptions.width;\n        this.height = <string>this.currentOptions.height;\n    }\n\n    private combineOptions(first: NgxGalleryOptions, second: NgxGalleryOptions) {\n        Object.keys(second).map((val) => first[val] = second[val] !== undefined ? second[val] : first[val]);\n    }\n}\n\n","import { SafeResourceUrl } from '@angular/platform-browser';\n\nexport interface INgxGalleryImage {\n    small?: string | SafeResourceUrl;\n    medium?: string | SafeResourceUrl;\n    big?: string | SafeResourceUrl;\n    description?: string;\n    url?: string;\n    label?: string;\n}\n\nexport class NgxGalleryImage implements INgxGalleryImage {\n    small?: string | SafeResourceUrl;\n    medium?: string | SafeResourceUrl;\n    big?: string | SafeResourceUrl;\n    description?: string;\n    url?: string;\n    label?: string;\n\n    constructor(obj: INgxGalleryImage) {\n        this.small = obj.small;\n        this.medium = obj.medium;\n        this.big = obj.big;\n        this.description = obj.description;\n        this.url = obj.url;\n        this.label = obj.label;\n    }\n}\n","import { NgModule, ModuleWithProviders, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { NgxGalleryActionComponent } from './lib/ngx-gallery-action.component';\nimport { NgxGalleryArrowsComponent } from './lib/ngx-gallery-arrows.component';\nimport { NgxGalleryBulletsComponent } from './lib/ngx-gallery-bullets.component';\nimport { NgxGalleryImageComponent } from './lib/ngx-gallery-image.component';\nimport { NgxGalleryThumbnailsComponent } from './lib/ngx-gallery-thumbnails.component';\nimport { NgxGalleryPreviewComponent } from './lib/ngx-gallery-preview.component';\nimport { NgxGalleryComponent } from './lib/ngx-gallery.component';\n\nexport * from './lib/ngx-gallery.component';\nexport * from './lib/ngx-gallery-action.component';\nexport * from './lib/ngx-gallery-image.component';\nexport * from './lib/ngx-gallery-thumbnails.component';\nexport * from './lib/ngx-gallery-preview.component';\nexport * from './lib/ngx-gallery-arrows.component';\nexport * from './lib/ngx-gallery-bullets.component';\nexport * from './lib/ngx-gallery-options.model';\nexport * from './lib/ngx-gallery-image.model';\nexport * from './lib/ngx-gallery-animation.model';\nexport * from './lib/ngx-gallery-helper.service';\nexport * from './lib/ngx-gallery-image-size.model';\nexport * from './lib/ngx-gallery-layout.model';\nexport * from './lib/ngx-gallery-order.model';\nexport * from './lib/ngx-gallery-ordered-image.model';\nexport * from './lib/ngx-gallery-action.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomHammerConfig extends HammerGestureConfig  {\n    overrides = <any>{\n        'pinch': { enable: false },\n        'rotate': { enable: false }\n    };\n}\n\n@NgModule({\n    imports: [\n        CommonModule,\n\t\tOverlayModule,\n        MatIconModule\n    ],\n    declarations: [\n        NgxGalleryActionComponent,\n        NgxGalleryArrowsComponent,\n        NgxGalleryBulletsComponent,\n        NgxGalleryImageComponent,\n        NgxGalleryThumbnailsComponent,\n        NgxGalleryPreviewComponent,\n        NgxGalleryComponent\n    ],\n    exports: [\n        NgxGalleryComponent\n    ],\n    providers: [\n        { provide: HAMMER_GESTURE_CONFIG, useClass: CustomHammerConfig }\n    ]\n})\nexport class NgxGalleryModule {}\n"]}